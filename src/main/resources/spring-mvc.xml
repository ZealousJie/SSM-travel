<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <!-- 注解扫描包,使SpringMVC认为包下用了@controller注解的类是控制器 -->
    <context:component-scan base-package="org.hnist.controller" />

    <!--开放静态资源的访问-->
<!--    <mvc:resources mapping="/js/**" location="/js/"/>-->
    <mvc:default-servlet-handler/>
    <mvc:resources mapping="/jsp/**" location="/jsp/" />
    <!-- 开启注解 将返回集合和对象自动转换成json字符串形式
           conversion-service="Date" 对应自定义转换器的id  -->
    <mvc:annotation-driven  conversion-service="Date"/>

    <!-- 声明转换器
         通过指定转换器工厂 帮我们产生我们的自定义转换器-->
    <bean id="Date" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <list>
                <bean class="org.hnist.converter.DateConverter"></bean>
            </list>
        </property>
    </bean>

    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="fileEncodings" value="utf-8"/>
    </bean>


    <!-- 注册验证器 -->
    <mvc:annotation-driven validator="validator" />
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
             <!--这里配置将使用上面国际化配置的messageSource -->
        <property name="validationMessageSource" ref="messageSource" />
    </bean>




    <!--json乱码-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper">
                    <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                        <property name="failOnEmptyBeans" value="false"/>
                    </bean>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>


    <!-- 定义跳转的文件的前后缀 ，视图模式配置 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址-->
    <!-- 配置内部资源解析器-->
<!--   <bean id="viewResolver"-->
<!--        class="org.springframework.web.servlet.view.InternalResourceViewResolver">-->
<!--        <property name="prefix" value="/jsp/" />-->
<!--        <property name="suffix" value=".jsp" />-->
<!--    </bean>-->

    <!--文件上传第二步，配置文件上传解析器-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"></property>
        <property name="maxUploadSize" value="5400000"></property>
        <property name="maxInMemorySize" value="40960"></property>
        <property name="resolveLazily" value="true"></property>
    </bean>

    <!--拦截器配置-->
    <mvc:interceptors>
        <mvc:interceptor>
            <!--配置对那些请求执行拦截操作-->
            <mvc:mapping path="/**"/>
            <!--配置那些请求排除拦截操作-->
            <mvc:exclude-mapping path="/userLogin"/>
            <mvc:exclude-mapping path="/register"/>
            <mvc:exclude-mapping path="/jsp/indexData"/>
            <mvc:exclude-mapping path="/ajax.jsp"/>
            <bean class="org.hnist.interceptor.loginInterceptor"/>
        </mvc:interceptor>
        <mvc:interceptor>
            <!--配置对那些请求执行拦截操作-->
            <mvc:mapping path="/jsp/UDesById"/>

            <bean class="org.hnist.interceptor.SaveDescInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>





    <!--简单异常处理器配置
         value 后接视图名称-->
<!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->
<!--        &lt;!&ndash;默认异常显示界面&ndash;&gt;-->
<!--        <property name="defaultErrorView" value=""/>-->
<!--        <property name="exceptionMappings">-->
<!--            <map>-->
<!--                &lt;!&ndash;java.lang.ClassCastException类型转换异常&ndash;&gt;-->
<!--                <entry key="java.lang.ClassCastException" value="/admin/all-admin-404.html"/>-->
<!--            </map>-->
<!--        </property>-->
<!--    </bean>-->

    <!--自定义异常处理器配置   （简单异常处理器和自定义异常处理器只能存在一个？）
    异常往上抛 直到controller层抛完 抛给springmvc前端控制器处理异常-->
<!--    <bean class="org.hnist.ExceSolve.MyExceptionSolve"/>-->





</beans>